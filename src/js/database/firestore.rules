rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents { 
  	
    // this function checks if the uid in the request sent matches that on the trip
    // they're trying to access.
    function authenticated(tripId) {
    	return get(/databases/$(database)/documents/trips/$(tripId)).data.uid == request.auth.uid;
    }
    
    // Ensures the request does not contain a UID component.
    // We use this when we edit the trip variable.
    // function doesNotContainUID() {
    // 	return (!request.resource.data.keys().hasAny(['uid']));
    // }
    
    // remember all rules must point to a document.
    match /trips/{tripId} {
    	function UIDmatches() {
      	return request.auth != null && request.auth.uid == resource.data.uid;
      }
    
    	function hasOnlyTheseKeys() {
      	return request.resource.data.keys().hasOnly([
        'author',
        'createDate',
        'lastAccessed',
        'title',
        'uid']);
      }
    	// users may only CRUD trips with their own UID.
    	allow create: if request.auth != null 
      && request.auth.uid == request.resource.data.uid
      && hasOnlyTheseKeys();
      
      allow read, delete: if UIDmatches();
      
      allow update: if UIDmatches() 
      && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'author', 'createDate']));
    }
    
    // the request's id is the same as the id stored on file.
    function leftIdUnaltered() {
    	return request.resource.data.id == resource.data.id;
    }
    
    match /trips/{tripId}/days/{dayId} {
			function hasOnlyTheseKeys() {
      	return request.resource.data.keys().hasOnly([
        	'id',
          'order',
          'title',
          'color'
        ]);
      }
      // reminder
      // write is shorthand for CREATE, UPDATE, and DELETE.
      // read is shorthand for GET and LIST.
    	allow read: if authenticated(tripId);
      allow create: if authenticated(tripId) && hasOnlyTheseKeys();
      allow update: if authenticated(tripId) && hasOnlyTheseKeys() && leftIdUnaltered();
      allow delete: if authenticated(tripId);
    }
    
    match /trips/{tripId}/pois/{poiId} {
      function hasOnlyTheseKeys() {
      	return request.resource.data.keys().hasOnly([
        	'dayId',
          'id',
          'order',
          'title',
          'coordinates',
          'description'
        ]);
      }
    
      allow read: if authenticated(tripId);
      allow create: if authenticated(tripId) && hasOnlyTheseKeys();
      allow update: if authenticated(tripId) && hasOnlyTheseKeys() && leftIdUnaltered();
      allow delete: if authenticated(tripId);
    }
    
    match /trips/{tripId}/photos/{photoId} {
      function hasOnlyTheseKeys() {
      	return request.resource.data.keys().hasOnly([
        	'poiId',
          'id',
          'path',
          'description',
          'storageUri'
        ]);
      }
      
      allow read: if authenticated(tripId);
      allow create: if authenticated(tripId) && hasOnlyTheseKeys();
      allow update: if authenticated(tripId) && hasOnlyTheseKeys();
      allow delete: if authenticated(tripId);
    }  
  }
}